name: Price_bot CI/CD

on:
  push:
    branches:
      - price_bot_develop
  pull_request:
    branches:
      - price_bot_develop

jobs:
    build_and_test:
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.12'

        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

        - name: Test with flake8
          run: |
            pip install flake8 pep8-naming flake8-broken-line flake8-return
            python -m flake8

    push_to_docker_hub:
        name: Buil anf push Docker image to Docker Hub
        runs-on: ubuntu-latest
        needs: build_and_test
        steps:
        - name: Check out the repo
          uses: actions/checkout@v2 
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1 
        - name: Login to Docker 
          uses: docker/login-action@v1 
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}
        - name: Push to Docker Hub
          uses: docker/build-push-action@v2 
          with:
            push: true
            context: .
            tags: ${{ secrets.DOCKER_USERNAME }}/price_bot:latest

    # deploy:
    #     runs-on: ubuntu-latest
    #     needs: build_and_push_to_docker_hub  # Деплой происходит после успешного билда
    #     steps:
    #       - name: Deploy to server
    #         uses: appleboy/ssh-action@v0.1.3  # Используем экшн для SSH подключения
    #         with:
    #           host: ${{ secrets.SERVER_HOST }}  # IP или доменное имя сервера
    #           username: ${{ secrets.SERVER_USER }}  # Пользователь на сервере
    #           key: ${{ secrets.SERVER_SSH_KEY }}  # Приватный ключ для SSH доступа
    #           port: 22  # Порт SSH
    #           script: |
    #             docker pull your_docker_username/your_image_name  # Загружаем новый образ
    #             docker stop your_container_name || true  # Останавливаем старый контейнер
    #             docker rm your_container_name || true  # Удаляем старый контейнер
    #             docker run -d --name your_container_name -p 80:80 your_docker_username/your_image_name  # Запускаем новый контейнер          