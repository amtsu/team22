# coding: utf-8

"""
    Your Project API

    Your project description  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PatchedHistory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            pk = schemas.IntSchema
            
            
            class title(
                schemas.StrSchema
            ):
                pass
            quantity = schemas.IntSchema
            
            
            class price(
                schemas.StrSchema
            ):
                pass
            
            
            class price_sale(
                schemas.StrSchema
            ):
                pass
            datetime_create = schemas.DateTimeSchema
            __annotations__ = {
                "pk": pk,
                "title": title,
                "quantity": quantity,
                "price": price,
                "price_sale": price_sale,
                "datetime_create": datetime_create,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pk"]) -> MetaOapg.properties.pk: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price_sale"]) -> MetaOapg.properties.price_sale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datetime_create"]) -> MetaOapg.properties.datetime_create: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pk", "title", "quantity", "price", "price_sale", "datetime_create", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pk"]) -> typing.Union[MetaOapg.properties.pk, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> typing.Union[MetaOapg.properties.quantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union[MetaOapg.properties.price, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price_sale"]) -> typing.Union[MetaOapg.properties.price_sale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datetime_create"]) -> typing.Union[MetaOapg.properties.datetime_create, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pk", "title", "quantity", "price", "price_sale", "datetime_create", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        pk: typing.Union[MetaOapg.properties.pk, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        price: typing.Union[MetaOapg.properties.price, str, schemas.Unset] = schemas.unset,
        price_sale: typing.Union[MetaOapg.properties.price_sale, str, schemas.Unset] = schemas.unset,
        datetime_create: typing.Union[MetaOapg.properties.datetime_create, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PatchedHistory':
        return super().__new__(
            cls,
            *_args,
            pk=pk,
            title=title,
            quantity=quantity,
            price=price,
            price_sale=price_sale,
            datetime_create=datetime_create,
            _configuration=_configuration,
            **kwargs,
        )
