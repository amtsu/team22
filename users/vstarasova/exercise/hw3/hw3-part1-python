Вопросы:
Задание: Ответьте письменно на вопросы дважды!
Выполнять это задание следует следующим образом.
Создаете папку аналогичную ~/github/tem22/users/amtsurkov/exercise/hw-3.
В папку копируете данный фаил.
Отвечаете по памяти, записывает свои ответы в фаил и комитите его.
Далее смотрите материалы, задает вопросы чату джипити, гуглу и т д.
И расширяете или меняете ответы на эти вопросы.
Опять комитите и пушите в репозиторий.

- С какой целью стоит изучать программирование?
- Что такое программа?
- Зачем нужно уметь работать в консоли(командной строке - терминале)?
- Что такое программа?
- Зачем нужен язык программирования?
- Какие принципы из философии Python вы помните? Прочитайте эти принципы еще раз и попробуйте по памяти их написать.
- Почему выбрали Python?
- Что такое Jupyter Notebook?
- Какие типы данных вы помнинте?
- Какие есть математические операции в языке python?
- Какие операции с строками есть в языке python

Ответы ДО гугла:
1. Развитие когнитивных способностей, прививка от болезни Альцгеймера. Перспективная сфера деятельности
2. Последовательность команд написанная на одном из языков программирования и предназначенная для получения какого-то результата.
3. Для ускорения работы и экономии оперативной памяти
4. Язык программирования нужен для того же для чего лингвистический язык. Для понимания между человеком и устройством
5. Честно говоря никаких
6. Питон самый красивый и логичный из известных мне. Нравится его многозадачность и огромное количество библиотек, и сообщество
7. Комплекс программных продуктов для облегчения работы
8. Строка, численные (их много), булево, массив, кортеж, список, объект
9. +,-,/,*, остаток от деления, целочисленное деление
10. Конкатенация, поиск подстроки, разделение, задом наперед

Ответы ПОСЛЕ гугла:
1. Постановка целей, декомпозиция и последовательное решение проблем – все это развивает мышление и способность решать сложные задачи. «Программирование помогает научиться решать проблемы, ставя задачи, проектируя решения, делая глубинный анализ причин и следствий»
2. комбинация компьютерных инструкций и данных, позволяющая аппаратному обеспечению вычислительной системы выполнять вычисления или функции управления
3. Работа с консолью позволяет выполнять различные операции и задачи без необходимости использования графического интерфейса
4. Коммуникация между человеком и устройством
5. Философия Python.
Красивое лучше, чем уродливое.
Явное лучше, чем неявное.
Простое лучше, чем сложное.
Сложное лучше, чем запутанное.
Плоское лучше, чем вложенное.
Разреженное лучше, чем плотное.
Читаемость имеет значение.
Особые случаи не настолько особые, чтобы нарушать правила.
При этом практичность важнее безупречности.
Ошибки никогда не должны замалчиваться.
Если они не замалчиваются явно.
Встретив двусмысленность, отбрось искушение угадать.
Должен существовать один и, желательно, только один очевидный способ сделать это.
Хотя он поначалу может быть и не очевиден, если вы не голландец.
Сейчас лучше, чем никогда.
Хотя никогда зачастую лучше, чем прямо сейчас.
Если реализацию сложно объяснить — идея плоха.
Если реализацию легко объяснить — идея, возможно, хороша.
Пространства имён — отличная штука! Будем делать их больше!
6. Почему Python?
Читабельность и простота.
Большая стандартная библиотека. 
Кросс-платформенность. 
Динамическая типизация.
Интерпретируемость. 
Большое сообщество.
Применимость в различных областях. 
Поддержка множественных парадигм программирования. 
Широкое использование в индустрии. 
Открытый исходный код Python доступен для просмотра и модификации. 
7. Интерактивный блокнот, первоначально являвшийся веб-реализацией и развитием IPython
8. Типы данных:
Числовые данные: int, float, complex (целые числа, числа с плавающей точкой, комплексные числа)
Строковые: str (строки)
Последовательные: list, tuple, range (список, кортеж, диапазон)
Бинарные типы: bytes, bytearray, memoryview (байты, массивы байтов, представление памяти)
Ассоциативные данные: dict (словари)
Логический тип: bool (булевый тип)
Множественные: set, frozenset (множество, замороженное множество)
9. Математические операции:
+	Добавление — добавляет левый операнд к правому	a + b = 15
-	Вычитание — вычитает правый операнд из левого	a - b = 5
*	Умножение — умножает левый операнд на правый	a * b = 50
/	Деление — делит левый операнд на правый	a / b = 2
%	Деление по модулю — делит левый операнд на правый и возвращает остаток. С помощью него, например, можно проверять числа на четность и нечетность. Если левый операнд меньше правого, то результатом будет левый операнд	a % b = 0
**	Возведение в степень	a ** b = 100000
//	Целочисленное деление — деление в котором возвращается только целая часть результата. Часть после запятой отбрасывается.	9 // 2 = 4 9.0 // 2.0 = 4.0
10. Строки в Python. Операции:
Сложение (конкатенация)
Вычитание
Дублирование (умножение)
Принадлежность строки
Определение длины строки
Доступ по индексу
Срез строки
Шаг извлечения среза

