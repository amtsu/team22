Задание: Ответьте письменно на вопросы дважды!
Выполнять это задание следует следующим образом.
Создаете папку аналогичную ~/github/tem22/users/amtsurkov/exercise/hw-3.
В папку копируете данный фаил.
Отвечаете по памяти, записывает свои ответы в фаил и комитите его.
Далее смотрите материалы, задает вопросы чату джипити, гуглу и т д.
И расширяете или меняете ответы на эти вопросы.
Опять комитите и пушите в репозиторий.

- С какой целью стоит изучать программирование?
﻿Изучение программирования может быть полезно для различных причин, таких как:

1. Развитие навыков логического мышления и проблемного решения. Программирование требует от вас критического мышления и способности к анализу сложных задач.
2. Улучшение когнитивных навыков, таких как внимательность, концентрация и память.
3. Приобретение полезных навыков для работы с компьютерами и технологиями. Программирование может быть использовано для создания собственного программного обеспечения, автоматизации процессов или решения индивидуальных задач.
4. Развитие навыков командной работы и сотрудничества с другими разработчиками при совместном создании проектов.
5. Получение профессионального опыта, что может быть полезно для получения работы в индустрии программного обеспечения или связанных областях.
6. Создание собственных проектов и решений для удовлетворения личных интересов, таких как создание игр, веб-сайтов или приложений.
- Что такое программа?
﻿Программа - это набор инструкций и алгоритмов, которые выполняются компьютером для достижения определенной цели или задачи. Эти инструкции могут быть представлены в виде текста (например, в языке программирования) или байтов (в случае машинного кода). Программа может быть использована для управления компьютером и его ресурсами, выполнения различных задач от простых до сложных.

- Зачем нужно уметь работать в консоли(командной строке - терминале)?
﻿Умение использовать командную строку (консоль) может быть полезно для различных задач, таких как:

1. Проверка и настройка системы: В консоли вы можете проверить версии программного обеспечения, уровень загрузки процессора, свободной памяти и другие параметры вашей системы.
2. Управление файлами и каталогами: Консоль позволяет быстро копировать, перемещать, удалять или просматривать файлы и папки на вашем компьютере.
3. Выполнение задач с помощью команд: В консоли вы можете использовать предустановленные программы (например, для поиска информации в Интернете или просмотра файлов) и создавать свои собственные скрипты для автоматизации процессов.
4. Работа с сетью: Консоль может быть использована для управления сетевыми настройками, такими как IP-адреса или протоколы подключения.
5. Установка и обновление программного обеспечения: В консоли вы можете установить и обновить различные приложения, а также удалить их, если это необходимо.
6. Работа с версиями кода: Если ваша работа связана с программированием или управлением проектами, вы можете использовать консоль для работы с системами контроля версий (Git, Mercurial и другие).
7. Настройка системы: В некоторых случаях вам придется настраивать параметры вашей операционной системы или устанавливать дополнительные компоненты для работы с определенными программами.

Умение работать в консоли может быстро и эффективно повысить производительность вашей работы, особенно если вы занимаетесь разработкой программного обеспечения или администрированием компьютеров.
- Зачем нужен язык программирования?
﻿Языки программирования являются основным инструментом для создания, изучения и использования компьютерных программ. Они позволяют выразить алгоритмы и логические структуры в виде текста, который может быть расшифрован и обработан компьютером.

Преимущества использования языков программирования включают:

1. Абстрагирование от деталей реализации: Языки программирования позволяют разработчикам сосредоточиться на логике и структуре алгоритмов, а не на подробностях их внутренней реализации.
2. Повышение производительности: Некоторые языки программирования позволяют создавать более оптимизированные и быстрые программы, чем это возможно с использованием абстрактных инструментов или графических интерфейсов.
3. Возможность легкой взаимосвязи между разработчиками: Языки программирования позволяют командам быстрее и эффективнее общаться, так как они могут использовать общепринятый язык для описания алгоритмов и структуры проекта.
4. Расширение возможностей: С помощью языков программирования вы можете создавать сложные приложения, которые могут быть использованы в различных областях, таких как наука, искусство, промышленность или обслуживание.
5. Возможности для автоматизации: Языки программирования позволяют создавать скрипты и макросы для автоматизации повторяющихся задач, что упрощает работу и сокращает время на выполнение различных операций.
- Какие принципы из философии Python вы помните? Прочитайте эти принципы еще раз и попробуйте по памяти их написать.
Красивое лучше, чем уродливое.
Явное лучше, чем неявное.
Простое лучше, чем сложное.
Сложное лучше, чем запутанное.
Плоское лучше, чем вложенное.
Разреженное лучше, чем плотное.
Читаемость имеет значение.
Особые случаи не настолько особые, чтобы нарушать правила.
При этом практичность важнее безупречности.
Ошибки никогда не должны замалчиваться.
Если они не замалчиваются явно.
Встретив двусмысленность, отбрось искушение угадать.
Должен существовать один и, желательно, только один очевидный способ сделать это.
Хотя он поначалу может быть и не очевиден, если вы не голландец.
Сейчас лучше, чем никогда.
Хотя никогда зачастую лучше, чем прямо сейчас.
Если реализацию сложно объяснить — идея плоха.
Если реализацию легко объяснить — идея, возможно, хороша.
Пространства имён — отличная штука! Будем делать их больше!
- Почему выбрали Python?

- Что такое Jupyter Notebook?

- Какие типы данных вы помнинте?

простой и распространенный
- Какие есть математические операции в языке python?

1. Арифметические операции:
   - `+` (сложение)
   - `-` (вычитание)
   - `*` (умножение)
   - `/` (деление)
   - `%` (остаток от деления)
   - `**` (возведение в степень)

2. Алгебраические операции:
   - `pow(x, y)` возводит число x в степень y
   - `abs(x)` возвращает абсолютную величину числа x
   - `round(x[, n])` округляет число x до нужного количества знаков после запятой (по умолчанию - целое число)
   - `min()`, `max()` возвращают минимальное или максимальное из переданных аргументов

3. Тригонометрические функции:
   - `sin(x)`, `cos(x)`, и `tan(x)` вычисляют синус, косинус и тангенс угла x (углы измеряются в радианах)
   - `asin(x)`, `acos(x)`, и `atan(x)` обратные функции для sin(), cos() и tan() соответственно

4. Логарифмические функции:
   - `log(x, base=10)` вычисляет логарифм с основанием 10 от числа x
   - `exp(x)` возводит число e в степень x (е - математическая постоянная)

5. Функции для работы со статистикой:
   - `random()` генерирует случайное число от 0 до 1
   - `randrange(start, stop[, step])` возвращает случайное целое число в пределах от start (включительно) до stop (не включая) с шагом step

интерактивное веб-приложение с открытым исходным кодом, позвоялющее писать и запускать программный код более чем на 40 языках программирования, включая Python, R, Julia и Scala
- Какие типы данных вы помнинте?
В языке Python выделяют несколько типов данных: целые числа, числа с плавающей точкой (вещественные), строки, логический тип. Тип каждой переменной может динамически изменяться по ходу выполнения программы. Определить, какой тип имеет переменная, можно с помощью команды type ()


- Какие операции с строками есть в языке python
1. Конкатенация (сложение) строк: `+`
2. Вставка одной строки в другую: `*=`, например, `s = 'abc' * 3` выведет "abcabcabc"
3. Обращение к символам по индексу: `строка[индекс]`. Индексы начинаются с 0 и увеличиваются влево, так что первый символ имеет индекс 0, а последний - длину строки минус 1.
4. Обращение к подстроке: `строка[начало:конец]`. Подстрока начинается с начала и заканчивается перед символом с индексом конец-1. Если указать только начало, возвращается вся строка до конца.
5. Замена подстроки: `строка.replace(substr, replacement)` заменяет все вхождения substr на replacement в строке.
6. Поиск подстроки: `строка.find(substr)`, возвращает индекс первого вхождения substr или -1 если не найдено. Есть также методы `count()` для количества вхождений и `index()` с обязательным поиском.
7. Разбиение строки на подстроки: `строка.split(separator, maxsplit=None)`. По умолчанию разделяет строку на список элементов, отделенных separator (по умолчанию - пробелы). maxsplit ограничивает количество подстрок.
8. Преобразование строки в верхний или нижний регистр: `строка.upper()`, `строка.lower()`
9. Структурирование текста с помощью шаблонов (форматов): `'{0} {1}'.format(a, b)`. Форматированные строки поддерживают множество опций для выравнивания и форматирования.






