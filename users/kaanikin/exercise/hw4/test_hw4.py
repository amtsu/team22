import pytest
from hw4 import (modify_lists_1, modify_lists_2, a_poem, sol_list, check_fibonacci_numbers, switch_pos, omar, story_of_programmer)

solyanka_list = [1, 2.3, 'abracadabra', [1, 2, 3], ('red', 'blue', 'green'), {'short': 'dict', 'long': 'dictionary'}, True]

fibonacci_list = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711]

short_poem = 'Кто битым за дедлайн был, \nтот больше не сольется. \nПуд багов съевший, выше ценит чистый код. \nКто дошик ел, тот рейтинг ценит свой. \nКто крашился, тот знает, что живой.'

def test_modify_lists_1():
   
    assert modify_lists_1()[0] == [1, 2, 3, 4, 5, 6, 9, 789], "Элемент добавлен неверно" 
    assert modify_lists_1()[1] == [1, 2, 3, 4, 5, 6, 9], "Элемент добавлен неверно"    
    
def test_modify_lists_2():
    
    assert modify_lists_2()[0] == [1, 2, 3, 4, 5, 6, 9, 789], "Элемент добавлен неверно" 
    assert modify_lists_2()[1] == [1, 2, 3, 4, 5, 6, 9, 789], "Элемент добавлен неверно" 
    
def test_a_list(): 
    assert a_poem()[0] == ['З', 'а', ' ', 'с', 'т', 'е', 'к', 'л', 'о', 'м', ' ', 'л', 'е', 'ж', 'а', 'л', ' ', 'П', 'и', 'т', 'о', 'н', ',', '\n', 'Б', 'о', 'л', 'ь', 'ш', 'о', 'й', ' ', 'и', ' ', 'т', 'о', 'л', 'с', 'т', 'ы', 'й', ',', ' ', 'к', 'а', 'к', ' ', 'б', 'а', 'т', 'о', 'н', '.', '\n', 'В', 'в', 'е', 'р', 'х', ' ', 'п', 'о', 'п', 'о', 'л', 'з', ',', '\n', 'З', 'а', 'т', 'е', 'м', ' ', 'в', 'е', 'р', 'н', 'у', 'л', 'с', 'я', ',', '\n', 'К', 'р', 'у', 'г', 'л', 'ы', 'м', ' ', 'б', 'у', 'б', 'л', 'и', 'к', 'о', 'м', ' ', 'с', 'в', 'е', 'р', 'н', 'у', 'л', 'с', 'я', '.']
    assert a_poem()[1] == 111, 'Неверно посчитано количество элементов'
    

def test_another_list():  
    assert a_poem()[2] == ['За', 'стеклом', 'лежал', 'Питон,', 'Большой', 'и', 'толстый,', 'как', 'батон.', 'Вверх', 'пополз,', 'Затем', 'вернулся,', 'Круглым', 'бубликом', 'свернулся.']
    assert a_poem()[3] == 16, 'Неверно посчитано количество элементов'

def test_one_more_list():    
    assert a_poem()[4] == ['За стеклом лежал Питон,', 'Большой и толстый, как батон.', 'Вверх пополз,', 'Затем вернулся,', 'Круглым бубликом свернулся.']
    assert a_poem()[5] == 5, 'Неверно посчитано количество элементов'
    
def test_sol_list(): 
    assert sol_list(solyanka_list)[0] == [1, 2.3, 'abracadabra', [1, 2, 3], ('red', 'blue', 'green'), {'short': 'dict', 'long': 'dictionary'}, True, [7]]

    assert sol_list(solyanka_list)[1] == 7, 'Неверно посчитано количество элементов'
    assert sol_list(solyanka_list)[2] == bool, 'Неверно определен тип'
    assert sol_list(solyanka_list)[3] == list, 'Неверно определен тип'
    
def test_check_fibonacci_numbers():
    assert check_fibonacci_numbers(fibonacci_list)[0] == 23, 'Неверно посчитано количество элементов'
    assert check_fibonacci_numbers(fibonacci_list)[1] == 2, 'Неверно посчитано количество элементов'
    assert check_fibonacci_numbers(fibonacci_list)[2] == {21: True, 33: False, 987: True, 9999: False}, 'Неверная проверка на принадлежность последовательности'
    
def test_switch_pos():
    assert switch_pos() == [1,2,3,4,5,6], 'Неправильная сортировка'
    
def test_omar():
    assert omar() == ['Кто битым жизнью был,', 'тот большего добьётся,', 'Пуд соли съевший выше ценит мёд.', 'Кто слёзы лил, тот искренней смеётся,', 'Кто умирал, тот знает, что живёт.'], 'Неверно выведен список'
    
def test_story_of_programmer():
    assert story_of_programmer(short_poem) == """Кто битым за дедлайн был, \nКто битым за дедлайн был, \nПуд багов съевший, выше ценит чистый код. \nКто дошик ел, тот рейтинг ценит свой. \nКто крашился, тот знает, что живой.\n""", 'Неверно выведен список'