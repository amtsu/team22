- С какой целью стоит изучать программирование?
Изучение программирования открывает широкие возможности для решения разнообразных задач, от разработки программного обеспечения и веб-приложений до анализа данных и автоматизации рутинных процессов. Это не только улучшает аналитическое мышление и способность к решению проблем, но и предоставляет востребованные на рынке труда навыки, позволяя претендовать на высокооплачиваемые должности в быстро развивающихся отраслях, таких как информационные технологии, искусственный интеллект и кибербезопасность.
- Что такое программа?
Компьютерная программа — это набор инструкций, написанных на программном языке, которые выполняются компьютером для выполнения определённых задач. Эти инструкции могут управлять обработкой данных, автоматизацией задач, взаимодействием с другими программами и устройствами, а также предоставлять пользовательский интерфейс и функциональность для конечных пользователей. Программы могут варьироваться от простых скриптов, выполняющих одну или несколько задач, до сложных систем, таких как операционные системы, приложения для баз данных и многопользовательские серверные приложения.
- Зачем нужно уметь работать в консоли(командной строке - терминале)?
Умение работать в консоли (командной строке, терминале) позволяет эффективно выполнять множество задач без графического интерфейса, обеспечивая быстрый доступ к функциям операционной системы, управление программным обеспечением и файлами, автоматизацию задач с помощью скриптов и выполнение сложных технических операций с высокой точностью. Это навык, особенно ценный для программистов, системных администраторов и IT-специалистов, позволяющий повысить продуктивность и гибкость в решении различных технических проблем.
- Что такое программа?
См. выще
- Зачем нужен язык программирования?
Язык программирования служит средством коммуникации между человеком и компьютером, позволяя разработчикам создавать инструкции для выполнения задач, разработки программного обеспечения, приложений и систем. Он обеспечивает структурированный и понятный способ описания алгоритмов и управления данными, что делает возможным автоматизацию процессов, решение сложных вычислительных задач и создание интерактивных интерфейсов. Благодаря разнообразию языков программирования, разработчики могут выбирать подходящие инструменты, оптимизированные под конкретные задачи и сферы применения, что способствует инновациям и технологическому прогрессу.
- Какие принципы из философии Python вы помните? Прочитайте эти принципы еще раз и попробуйте по памяти их написать.
    Красота лучше, чем уродство. Код должен быть приятным на вид.
    Ясность лучше, чем загадочность. Код должен быть понятным и очевидным.
    Простота лучше, чем сложность. Стремление к простоте в решениях.
    Сложность лучше, чем запутанность. Если простота недостижима, предпочтение следует отдать читаемой сложности.
    Читаемость имеет значение. Код читается чаще, чем пишется, поэтому его должно быть легко читать.
    Особые случаи не настолько особенные, чтобы нарушать правила. Правила следует соблюдать для обеспечения консистентности.
    При этом практичность важнее безупречности. Иногда правила могут быть нарушены для достижения практических целей.
    Ошибки никогда не должны замалчиваться. Система должна явно сообщать об ошибках, если только они не преднамеренно не игнорируются.
    В случае неопределённости отказывайтесь от искушения угадать. Лучше оставить код ясным, чем пытаться предугадать множество нестандартных ситуаций.
    Должен существовать один — и желательно только один — очевидный способ сделать это. Это способствует единству стиля и подхода.
    Хотя способ может быть не очевиден сразу, если вы не голландец. Признание того, что оптимальные решения могут не быть очевидны для людей с разным опытом и в разных культурах.
    Сейчас лучше, чем никогда. Промедление может стать препятствием для разработки.
    Хотя никогда часто лучше, чем прямо сейчас. Иногда отсрочка может привести к лучшему решению.
    Если реализацию сложно объяснить — идея плоха. Хорошие решения легко объясняются.
    Если реализацию легко объяснить — идея может быть хороша. Простота и ясность являются признаками хороших решений.
    Пространства имён — отличная штука! Будем делать их побольше! Энтузиазм к организации кода и избеганию конфликтов имен.
- Почему выбрали Python?
Мой выбор пал на Python из-за его универсальности, лёгкости синтаксиса и широких возможностей применения, включая веб-разработку, научные исследования, анализ данных, искусственный интеллект и машинное обучение. Этот язык поддерживает различные парадигмы программирования и предлагает обширные библиотеки и фреймворки, ускоряя процесс разработки. Простота изучения делает его доступным для новичков, а гибкость и мощь привлекают профессионалов. Наличие активного сообщества и множество образовательных ресурсов также сыграли свою роль в моём выборе.
- Что такое Jupyter Notebook?
Jupyter Notebook — это открытая веб-приложение для создания и обмена документами, которые могут содержать живой код, уравнения, визуализации и пояснительный текст. Используемый в научных исследованиях, образовании и анализе данных, Jupyter поддерживает более 40 языков программирования, включая Python, R, Julia и Scala. Блокноты Jupyter идеально подходят для итеративной разработки и представления данных, позволяя объединить код, его выполнение, комментарии и результаты в одном документе, что облегчает совместную работу и обмен знаниями.
- Какие типы данных вы помнинте?
    Целые числа (int) - представляют целые числа положительные, отрицательные или ноль без десятичной части.
    Вещественные числа (float) - представляют числа с плавающей точкой (то есть числа с десятичной частью).
    Комплексные числа (complex) - представляют комплексные числа, содержащие действительную и мнимую части.
    Строки (str) - представляют последовательности символов, используемые для хранения текстовой информации.
    Булевы значения (bool) - представляют логические значения Истина (True) и Ложь (False).
    Списки (list) - упорядоченные коллекции объектов, которые могут быть разных типов.
    Кортежи (tuple) - неизменяемые упорядоченные коллекции объектов.
    Словари (dict) - неупорядоченные коллекции пар ключ-значение.
    Множества (set) - неупорядоченные коллекции уникальных объектов.
    Замороженные множества (frozenset) - неизменяемая версия множества.
- Какие есть математические операции в языке python?
    Сложение (+): складывает два числа.
    Вычитание (-): вычитает одно число из другого.
    Умножение (*): умножает два числа.
    Деление (/): делит одно число на другое, результатом является вещественное число.
    Целочисленное деление (//): делит одно число на другое, результатом является целое число без остатка.
    Остаток от деления (%): возвращает остаток от деления одного числа на другое.
    Возведение в степень (**): возводит число в указанную степень.
    Сокращенные операции присваивания (например, +=, -=, *=, /=, //=, %=, **=) позволяют выполнять операцию и присваивать результат той же переменной.
- Какие операции с строками есть в языке python
Конкатенация (+): объединение двух строк в одну.
Повторение (*): повторение строки указанное количество раз.
Доступ по индексу: получение символа по его индексу, например, str[index].
Срезы (slice): извлечение подстроки, используя начальный и конечный индексы, например, str[start:end].
Длина строки (len()): получение количества символов в строке.
Поиск подстроки (find(), index()): поиск положения подстроки в строке.
Замена подстроки (replace()): замена одной подстроки на другую.
Разделение строки (split()): разделение строки на список строк по разделителю.
Объединение строк (join()): объединение коллекции строк в одну строку с использованием разделителя.
Преобразование регистра (upper(), lower(), capitalize(), title()): изменение регистра букв в строке.
Удаление пробелов (strip(), lstrip(), rstrip()): удаление пробельных символов с начала и/или конца строки.
Проверка содержания (startswith(), endswith()): проверка начала или окончания строки на соответствие подстроке.

