# Материалы для использования в функциях:
set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}
set3 = {10, 11, 12}
set4 = {11, 12, 13}
fruits_quantity = {'яблоко': 5, 'банан': 10, 'апельсин': 7}
fruits_prices = {"яблоко": 1.5, "банан": 2, "апельсин": 1.2}



##################################################################################
# Функция объеденения множеств:
##################################################################################

def set_union(set1, set2):
    return set1 | set2

##################################################################################
# Является ли одно множество подмножеством другого:
##################################################################################

def is_subset(set1, set2):
    return set1.issubset(set2)

##################################################################################
# Создайте функцию для объединения нескольких множеств:
##################################################################################

def many_unions(*sets):
    many_union = set()
    for t in sets:
        many_union |= t
    return many_union

##################################################################################
# Создайте функцию для удаления конкретного элемента из множества:
##################################################################################.

def del_set_element(set, element):
    for e in set:
        if e == element:
            set.discard(e)
            return set

##################################################################################
# Создайте функцию для проверки на равенство двух множеств:
##################################################################################

def equality(set1, set2):
    set_equality = set1 == set2
    return set_equality

##################################################################################
# Создайте функцию create_set для создания множества с заданными элементами:
##################################################################################

def create_set(*args):
    set_new = set()
    set_new = set(args)
    return set_new

##################################################################################
# Cjздайте функцию create_dictionary для создания словаря с заданными ключами и значениями:
##################################################################################

def create_dictionary(key , value):
    my_dict = {key : value}
    return my_dict

##################################################################################
# Напишите функции add_student и remove_student для добавления и удаления студентов из словаря:
##################################################################################

def add_student(dict, student, age):
    dict |= {student : age}
    return dict

def remove_student(dict, student):
    dict.pop(student)
    return dict

##################################################################################
# Напишите функции add_fruit и remove_fruit для добавления и удаления фруктов, их количества и стоимости в списки fruits_quantity и fruits_prices:
##################################################################################

def add_fruit(qua_dict, price_dict, fruit, quantity, price):
    qua_dict |= {fruit : quantity}
    price_dict |= {fruit : price}
    return qua_dict, price_dict

def remove_fruit(qua_dict, price_dict, fruit):
    qua_dict.pop(fruit)
    price_dict.pop(fruit)
    return qua_dict, price_dict

##################################################################################
# Создайте функцию для объединения двух словарей:
##################################################################################

def dict_union(dict1, dict2):
    dict3 = {**dict1, **dict2}
    return dict3

##################################################################################
# Создайте функцию для удаления элемента из словаря по заданному ключу:
##################################################################################

def element_del(dict, element):
    dict.pop(element)
    return dict

##################################################################################
# Создайте функцию для переворачивания значений и ключей в словаре:
##################################################################################

def change_key_to_value(dict):
    new_dict = {}
    for k, v in dict.items():
        new_dict[v] = k
    return new_dict

##################################################################################
# Создайте функцию для сортировки словаря по ключам в обратном порядке:
##################################################################################

def sort_reversed(dict1):
    dict1 = dict(sorted(dict1.items(), reverse = True))
    return dict1

##################################################################################
# Создайте функцию возвращающую наибольшее значение элемента словаря:
##################################################################################

def biggest(dict1):
    list1 = []
    reversed_dict = sort_reversed(change_key_to_value(dict1))
    for k, v in reversed_dict.items():
        list1.append(k)
        list1.append(v)
    return list1[0:2]

##################################################################################
# Создайте функцию check_fruit_price для проверки стоимости фрукта и вывода соответствующего сообщения:
##################################################################################

def check_fruit_price(dict_prices, fruit):
    if fruit in dict_prices:
        if dict_prices[fruit] > 1.5:
            return 'дорогой товар'

##################################################################################
# Создайте функцию check_age для проверки возраста студента и вывода соответствующего сообщения:
##################################################################################

def check_age(dict, name):
    if dict.get(name):
        if dict[name] >= 18:
                return 'Совершеннолетний'
        elif dict[name] < 18:
            return 'Несовершеннолетний'
    else:
        return 'Нет такого студента'

##################################################################################
# Создайте функцию compare_sets_length, которая сравнивает длину двух множеств и выводит информацию о том, какое из множеств длиннее:
##################################################################################

def compare_sets_length(set1, set2):
    if len(set1) > len(set2):
        return 'Первое множество больше второго'
    elif len(set1) < len(set2):
        return 'Первое множество меньше второго'
    else:
        return 'Множества равны'

##################################################################################
# Создайте функцию для определения четности или нечетности числа:
##################################################################################

def even_odd_number(write_number):
    if write_number % 2 == 0:
        return 'Четное'
    else:
        return 'Нечетное'

##################################################################################
# Создайте функцию для определения високосного года. Функция должна принимать на вход год в виде числа и возвращать строку "високосный" или "обычный":
##################################################################################

def leap_year(year):
    if year % 4 == 0:
        if year % 100 == 0:
            if year % 400 == 0:
                return True
            else:
                return False
        else:
            return True
    else:
        return False

##################################################################################
# Создайте функцию для проверки, является ли строка палиндромом:
##################################################################################

def palindrom(word):
    r_word = word[::-1]
    if word == r_word:
        return 'Это палиндром'
    else:
        return 'Это не палиндром'

##################################################################################
# Создайте функцию для определения времени суток по введенному времени:
##################################################################################

def time_of_day(hours, minutes):
    if not (0 <= hours <= 23 and 0 <= minutes <= 59):
        return "Некорректное время"
    if 6 <= hours < 12:
        return "утро"
    elif 12 <= hours < 18:
        return "день"
    elif 18 <= hours < 24:
        return "вечер"
    else:
        return "ночь"

##################################################################################
# Создайте функцию, которая определяет, является ли введенное число простым:
##################################################################################

def prime_number(number):
    if number <= 1:
        return 'not prime'
    for i in range(2, number):
        if number % i == 0:
            return 'not prime'
    return 'prime'

##################################################################################
# Создайте функцию для проверки входящей строки на наличие только буквенных символов:
##################################################################################

string1 = 'dddddd'
string2 = 'lett er222'
def isalfa_string(string):
    if string.isalpha():
        return 'Только буквы'
    elif not string.isalpha():
        return 'Не только буквы'

##################################################################################
# Создайте функцию, которая определяет, является ли введенная дата корректной:
##################################################################################

def check_date(day, month, year):
    if month < 1 or month > 12:
        return False
    
    if month in [1, 3, 5, 7, 8, 10, 12]:
        if day < 1 or day > 31:
            return False
    elif month in [4, 6, 9, 11]:
        if day < 1 or day > 30:
            return False
    elif month == 2:
        if leap_year(year) == True:
            if day < 1 or day > 29:
                return False
        else:
            if day < 1 or day > 28:
                return False
    
    return True

##################################################################################
# Создайте функцию, которая определяет, является ли введенное число палиндромом:
##################################################################################

def palindrom_number(number):
    new_number = str(number)
    else_number = new_number[::-1]
    another_number = int(else_number)
    if another_number == number:
        return 'Палиндром'
    else:
        return 'Неа'

##################################################################################
# Создайте функцию для определения дня недели по введенному номеру дня:
##################################################################################

def day_counter(day):
    if day % 7 == 1:
        return 'понедельник'
    if day % 7 == 2:
        return 'вторник'
    if day % 7 == 3:
        return 'среда'
    if day % 7 == 4:
        return 'четверг'
    if day % 7 == 5:
        return 'пятница'
    if day % 7 == 6:
        return 'суббота'
    if day % 7 == 0:
        return 'воскресенье'

##################################################################################
# Создайте функцию для вывода факториала заданного числа:
##################################################################################

def factorial(number):
    if number == 0:
        return 1
    return number * factorial(number - 1)

##################################################################################
# Создайте функцию для поиска суммы чисел в заданном диапазоне:
##################################################################################

def sum_between(f, s):
    if f < s:
        summ = []
        for n in range(f, s):
            summ.append(n)
        return (sum(summ) + s)
    else:
        return 'Первое число должно быть меньше второго'

##################################################################################
# Создайте функцию для генерации и вывода всех простых чисел до заданного числа:
##################################################################################

def every_prime_inrange(number1, number2):
    list = []
    for n in range(number1, number2):
        if prime_number(n) == 'prime':
            list.append(n)
    return list

##################################################################################
# Создайте функцию для проверки строки на палиндромность без учёта регистра и знаков препинания:
##################################################################################

def ultra_palindrom(string):
    list1 = ''
    for w in string.casefold():
        if w.isalpha():
            list1 += w
    if list1 == list1[::-1]:
        return 'Палиндром'
    else:
        return 'Не палиндром'

##################################################################################
# Создайте функцию для поиска наибольшего общего делителя (НОД) двух чисел:
##################################################################################

def nod(a, b):
    if a % b == 0:
        return b
    elif b % a == 0:
        return a
    else:
        c = a % b
        d = b % c
        if d == 0:
            return c
        else:
            e = c % d
            if e == 0:
                return d
            else:
                f = d % e
                if f == 0:
                    return e
                else:
                    g = e % f
                    if g == 0:
                        return f

##################################################################################
# Создайте функцию print_students для вывода информации о студентах из словаря:
##################################################################################

def students_age(dict):
    names = []
    for n in dict.items():
        names.append(n)
    return names

##################################################################################
# Создайте функцию print_students для вывода информации о студентах из словаря:
##################################################################################

def get_value_from_user(floor, number):
    print ('Введите число')
    if floor >= number:
        return 'Число должно быть больше порога', floor
    return True

##################################################################################
# Создайте функцию, которая будет запрашивать у пользователя его возраст:
##################################################################################

def show_me_your_age(age):
    if age < 0:
        return 'Еще не родился'
    if 18 > age > 0:
        return 'Несовершеннолетний'
    if 18 < age < 65:
        return 'Взрослый'
    if 100 > age > 65:
        return 'Пенсионер'
    if age > 100:
        return 'Ультрапенсионер'

##################################################################################
# Создайте функцию, которая будет проверять введенную пользователем строку на наличие повторяющихся символов:
##################################################################################

def repeat_simbols(string):
    set = {}
    for w in string:
        if string.count(w) > 1:
            set |= {w: string.count(w)}
    return set
































