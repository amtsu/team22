1. Разберите предложенным на занятии методом (составление модели — алгоритм — программа — анализ результата) одно из заданий предыдущих домашних работ, вызвавшее сложности при решении.

Модель
Входные данные: Год в виде целого числа
Выходные данные: Ответ о том, является ли год високосным
Связи: Определение високосного года - год, который делится на 4 без остатка, но при этом не делится на 100 без остатка (за исключением годов, которые делятся на 400 без остатка).

Алгоритм
Принять год в качестве аргумента функции.
Проверить, делится ли год на 4 без остатка и при этом не делится на 100 без остатка, или делится на 400 без остатка.
Если условие выполняется, то год високосный.
Вывести результат.

Программа
python code
def is_leap_year(year):
    ''' Если год делится на 4 без остатка, но при этом 
    не делится на 100 без остатка, то он високосный.
    '''
    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
        print(f'Год {year} високосный')
    else:
        print(f'Год {year} НЕ високосный')

Примеры использования
year1 = 2000
year2 = 2024
year3 = 2100

is_leap_year(year1)
# Год 2000 високосный
is_leap_year(year2)
# Год 2024 високосный
is_leap_year(year3)
# Год 2100 НЕ високосный

Анализ результатов
Проверяем, что программа корректно определяет високосный год.
Можно использовать известные високосные и не високосные годы, чтобы убедиться в правильности работы функции.
Также, стоит проверить граничные случаи, например, год 2000, который является високосным из-за условия деления на 400 без остатка.
Если все проверки пройдены успешно, задача считается решенной.

2.Напишите программу для робота, который сходит за хлебом из дома в булочную. Робот умеет поворачивать направо на 90 градусов командой «Поворот» и передвигаться на 0.5 ми командой «Вперед». Больше ничего не умеет. Булочник сам положит в него хлеб. Нужно добраться до булочной и вернуться.

# пововрот налево
X 3 Поворот

Х 34 Вперед 

Х 1 Поворот

Х 45 Вперед 

Ждем хлеб

Х 1 Поворот

Х 34 Вперед 

Х 1 Поворот

Х 45 Вперед 

Развернуто:

Поворот
Поворот
Поворот
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Поворот
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Ждем хлеб
Поворот
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Поворот
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
Вперед
​
3.Напишите программу для робота, который сходит за хлебом из дома в булочную. Робот умеет поворачивать направо на 90 градусов командой «Поворот» и передвигаться на 0.5 ми командой «Вперед». Робот имеет язык программирования с поддержкой переменных, математических операторов, операторов условий и циклов. Булочник сам положит в него хлеб. Нужно добраться до булочной и вернуться.

x_0, y_0 = 25, 0
x_1, y_1 = 8, 22.5

x = x_0 - x_1 #
y = y_1 - y_0 #

for i in 3:
    Поворот

for i in x/0.5:
    Вперед

Поворот

for i in y/0.5:
    Вперед

Ждем хлеб 

Поворот

for i in x/0.5:
    Вперед

Поворот

for i in y/0.5:
    Вперед

4.Напишите программу для робота, который сходит за хлебом из дома в булочную. Робот умеет поворачивать на заданное число градусов, двигаться вперед со скоростью 0.2м/с, имеет встроенный счетчик времени. Булочник сам положит в него хлеб. Нужно добраться до булочной и вернуться.

x_0, y_0 = 25, 0
x_1, y_1 = 8, 22.5

x = x_0 - x_1 #
y = y_1 - y_0 #

speed = 0.2

for i in 3:
    Поворот

for i in x/speed
    Вперед

Поворот

for i in y/speed:
    Вперед

Ждем хлеб 

Поворот

for i in x/speed:
    Вперед

Поворот

for i in y/speed:
    Вперед


5.Напишите инструкцию для участника наших курсов по работе с git при выполнении одной домашней работы.

1. Убедитесь, что вы находитесь в ветке main. Если нет, переключитесь в ветку main с помощью команды:
git checkout main

2. Обновите вашу локальную копию репозитория, чтобы учесть возможные изменения, выполнив команду:
git pull

3. Создайте новую ветку для работы над домашним заданием и сразу переключитесь на нее, используя флаг -b для создания и переключения:
git branch -b имя_пользователя-номер_домашней_работы
Например: git branch -b oekorchevaya-hw6

4.Внесите необходимые изменения в код.

5.Добавьте измененные файлы для коммита.

Вы можете добавить все файлы в текущей директории с помощью:  git add .
Или добавить конкретные файлы с использованием: git add название_файла1 название_файла2 название_файла3

6.Проверьте статус коммитов, чтобы удостовериться, что все необходимые файлы добавлены:
git status
    Если нужно добавить еще файлы, используйте git add. 
    Если добавлены лишние файлы, воспользуйтесь git reset: git reset имя_файла
    Если все корректно, переходите к следующему шагу.

7.Создайте коммит с описанием ваших изменений:
git commit -m 'ваш комментарий'

8. Проверяем правильно ли создали коммит, от нужной ли ветки создана ваша ветка командой git log
!!! Если коммит сделан неверно !!!
    Отмена последнего коммита (с сохранением изменений в рабочей директории):
        git reset HEAD^    или   git reset --soft HEAD^
    Отмена последнего коммита (с удалением изменений из индекса):
        git reset --mixed HEAD^
    Отмена последнего коммита (с удалением изменений из индекса и рабочей директории):
        git reset --hard HEAD^
    Если все хорошо, то переходим к следующему шагу.

9. Загружаем свои изменения в удаленный репозиторий:
git push --set-upstream origin имя_ветки

10. Переходим на GitHub в веб-интерфейсе и создаем Pull Request (PR).

11. Дождитесь, пока ваш PR будет проверен и принят ментором. В случае необходимости, внесите изменения, основываясь на комментарии ментора.

12. Если ветку залили в main и она больше вам не нужна, то смело удаляйте ветку
git branch -d имя_ветки

13. Можно выдохнуть и похвалить себя))